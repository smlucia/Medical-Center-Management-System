/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hospitalmanagmentsystem;

import java.awt.Color;
import javax.swing.table.DefaultTableModel;
import java.awt.Graphics;
import java.awt.Image;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lushiya
 */
public class patientHistoryNew extends javax.swing.JFrame {
    Connection con;
    PreparedStatement insert, update, delete;

    /**
     * Creates new form patientHistory
     */
    public patientHistoryNew() {
        initComponents();
        name.setEditable(false);
        gender.setEditable(false);
        age.setEditable(false);
        area.setEditable(false);
        docConsult.setEditingRow(0);
        docConsult.setEditingColumn(0);
    }
    
    public void showDate() {
        java.util.Date d = new java.util.Date();
        SimpleDateFormat sd = new SimpleDateFormat("yyyy-MM-dd");
        reportDate.setText(sd.format(d));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        patientContact = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        searchBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        docConsult = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        labTests = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        mobileServices = new javax.swing.JTable();
        docMsg = new javax.swing.JLabel();
        labMsg = new javax.swing.JLabel();
        mobileMsg = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        area = new javax.swing.JTextArea();
        name = new javax.swing.JTextField();
        age = new javax.swing.JTextField();
        gender = new javax.swing.JTextField();
        viewBtn = new javax.swing.JButton();
        printBtn = new javax.swing.JButton();
        reportDate = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        medicine = new javax.swing.JTable();
        medicineMsg = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(214, 234, 245));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel12.setText("Patient History");

        patientContact.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        patientContact.setForeground(new java.awt.Color(153, 153, 153));
        patientContact.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                patientContactFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                patientContactFocusLost(evt);
            }
        });
        patientContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientContactActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Patient Contact No :");

        searchBtn.setBackground(new java.awt.Color(88, 131, 176));
        searchBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        searchBtn.setForeground(new java.awt.Color(255, 255, 255));
        searchBtn.setText("Search");
        searchBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchBtnMouseClicked(evt);
            }
        });
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Patient Name :");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Lab Tests :");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Age :");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Gender :");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Mobile Medical Services :");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Doctor Consultations :");

        docConsult.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        docConsult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doctor Name", "Channeled Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        docConsult.setGridColor(new java.awt.Color(153, 204, 255));
        docConsult.setRowHeight(25);
        docConsult.setSelectionBackground(new java.awt.Color(204, 204, 204));
        docConsult.setSelectionForeground(new java.awt.Color(0, 0, 0));
        docConsult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                docConsultMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(docConsult);

        labTests.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labTests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Test Name", "Test Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        labTests.setGridColor(new java.awt.Color(153, 204, 255));
        labTests.setRowHeight(25);
        labTests.setSelectionBackground(new java.awt.Color(204, 204, 204));
        labTests.setSelectionForeground(new java.awt.Color(0, 0, 0));
        labTests.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labTestsMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(labTests);

        mobileServices.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        mobileServices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Service Name", "Service Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mobileServices.setGridColor(new java.awt.Color(153, 204, 255));
        mobileServices.setRowHeight(25);
        mobileServices.setSelectionBackground(new java.awt.Color(204, 204, 204));
        mobileServices.setSelectionForeground(new java.awt.Color(0, 0, 0));
        mobileServices.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mobileServicesMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(mobileServices);

        docMsg.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        docMsg.setForeground(new java.awt.Color(255, 0, 0));

        labMsg.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labMsg.setForeground(new java.awt.Color(255, 0, 0));

        mobileMsg.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        mobileMsg.setForeground(new java.awt.Color(255, 0, 0));

        area.setColumns(20);
        area.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        area.setRows(5);
        jScrollPane1.setViewportView(area);

        name.setBackground(new java.awt.Color(214, 234, 245));
        name.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        name.setBorder(null);

        age.setBackground(new java.awt.Color(214, 234, 245));
        age.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        age.setBorder(null);

        gender.setBackground(new java.awt.Color(214, 234, 245));
        gender.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        gender.setBorder(null);

        viewBtn.setBackground(new java.awt.Color(88, 131, 176));
        viewBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        viewBtn.setForeground(new java.awt.Color(255, 255, 255));
        viewBtn.setText("View");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });

        printBtn.setBackground(new java.awt.Color(88, 131, 176));
        printBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        printBtn.setForeground(new java.awt.Color(255, 255, 255));
        printBtn.setText("Print");
        printBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBtnActionPerformed(evt);
            }
        });

        reportDate.setForeground(new java.awt.Color(255, 255, 255));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Medicines Taken :");

        medicine.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        medicine.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Drug Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        medicine.setGridColor(new java.awt.Color(153, 204, 255));
        medicine.setRowHeight(25);
        medicine.setSelectionBackground(new java.awt.Color(204, 204, 204));
        medicine.setSelectionForeground(new java.awt.Color(0, 0, 0));
        medicine.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                medicineMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(medicine);

        medicineMsg.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        medicineMsg.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mobileMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gender, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(265, 265, 265))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(patientContact, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)))
                                .addComponent(searchBtn))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(docMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(medicineMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(viewBtn)
                        .addGap(29, 29, 29)
                        .addComponent(printBtn)
                        .addGap(192, 192, 192))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(292, 292, 292)
                .addComponent(reportDate, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(reportDate, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientContact, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(gender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(docMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(4, 4, 4)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                                    .addComponent(labMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(mobileMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(medicineMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(35, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(viewBtn)
                            .addComponent(printBtn))
                        .addGap(35, 35, 35))))
        );

        backBtn.setBackground(new java.awt.Color(88, 131, 176));
        backBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        backBtn.setForeground(new java.awt.Color(255, 255, 255));
        backBtn.setText("Back");
        backBtn.setAutoscrolls(true);
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1021, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void patientContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientContactActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientContactActionPerformed

    private void patientContactFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_patientContactFocusGained
        // TODO add your handling code here:
        if(patientContact.getText().equals("Enter Patient Contact No")){
            patientContact.setText("");
            patientContact.setForeground(new Color(153,153,153));
        }
    }//GEN-LAST:event_patientContactFocusGained

    private void patientContactFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_patientContactFocusLost
        // TODO add your handling code here:
        if(patientContact.getText().equals("")){
            patientContact.setText("Enter Patient Contact No");
            patientContact.setForeground(new Color(153,153,153));
        }
    }//GEN-LAST:event_patientContactFocusLost

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        area.setText("");
        if (patientContact.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter a phone number");
        } else if (patientContact.getText().length() < 10 || patientContact.getText().matches("\\d+") == false) {
            JOptionPane.showMessageDialog(this, "Invalid phone number");
            patientContact.setText("");
        } else if (patientContact.getText().equals("") && docMsg.getText().equals("") && patientContact.getText().equals("") && name.getText().equals("") && age.getText().equals("")
            && labMsg.getText().equals("") && gender.getText().equals("") && mobileMsg.getText().equals("") && docConsult.getCellEditor()== null 
                && labTests.getCellEditor()== null && mobileServices.getCellEditor()== null){
            //docConsult.getRowCount(0);
            JOptionPane.showMessageDialog(this, "No patient record for the phone number");
            patientContact.setText("");
        } else {
            try {
                Class.forName("com.mysql.jdbc.Driver");

                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3308/channelingcenter", "root", "");

                String sql1 = "select fullName , age , gender,contactNo,patientId from patient where contactNo=?";

                PreparedStatement p1 = con.prepareStatement(sql1);
                p1.setInt(1, Integer.parseInt(patientContact.getText()));
                ResultSet r1 = p1.executeQuery();

                if (r1.next()) {
                    name.setText(r1.getString("fullName"));
                    age.setText(r1.getString("age"));
                    gender.setText(r1.getString("gender"));
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Record Not Found");
            }

        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void docConsultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_docConsultMouseClicked
        // TODO add your handling code here:
        DefaultTableModel df = (DefaultTableModel) docConsult.getModel();
        int selectedIndex = docConsult.getSelectedRow();

        //        cName.setText(df.getValueAt(selectedIndex,1).toString());
        //        pname.setText(df.getValueAt(selectedIndex,0).toString());
        //        tok.setText(df.getValueAt(selectedIndex,2).toString());
        //        docAppFee.setText(df.getValueAt(selectedIndex,4).toString());
        //        aTime.setText(df.getValueAt(selectedIndex,5).toString());
        //        viewDate.setText(df.getValueAt(selectedIndex,6).toString());

        /*Date adate1;
        try{
            adate1=(Date) new SimpleDateFormat("yyyy-MM-dd").parse(df.getValueAt(selectedIndex, 6).toString());
            adate.setDate(adate1);

        }
        catch (ParseException ex) {
            Logger.getLogger(viewAppointment.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }//GEN-LAST:event_docConsultMouseClicked

    private void labTestsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labTestsMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_labTestsMouseClicked

    private void mobileServicesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mobileServicesMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_mobileServicesMouseClicked

    private void searchBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBtnMouseClicked
        // TODO add your handling code here:
                int c;

        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3308/channelingcenter", "root", "");

            //retrive the patient ID
            String patientPhone = patientContact.getText();
            String sql2 = "SELECT patientId FROM patient WHERE contactNo = '" + patientPhone + "'";
            insert = (com.mysql.jdbc.PreparedStatement) con.prepareStatement(sql2);
            ResultSet r2 = insert.executeQuery(sql2);
            r2.next();
            String patient = r2.getString("patientId");

            //retrieve the doctor name and channeled date
            insert = con.prepareStatement("select d.docName,da.appDate from doctor d, docappointment da where da.patientId='" + patient + "' AND d.docId = da.docId");
            ResultSet r3 = insert.executeQuery();
            if (r3.next() == false) {
                docMsg.setText("There are no doctor consultions");
                DefaultTableModel df = (DefaultTableModel) docConsult.getModel();
                df.setRowCount(0);
            } else {
                //docMsg.setVisible(false);
                docMsg.setText("");
                insert = con.prepareStatement("select d.docName,da.appDate from doctor d, docappointment da where da.patientId='" + patient + "' AND d.docId = da.docId");
                ResultSet r4 = insert.executeQuery();
                ResultSetMetaData res = r4.getMetaData();
                c = res.getColumnCount();
                DefaultTableModel df = (DefaultTableModel) docConsult.getModel();
                df.setRowCount(0);

                while (r4.next()) {
                    Vector v2 = new Vector();
                    for (int a = 1; a <= c; a++) {
                        v2.add(r4.getString("d.docName"));
                        v2.add(r4.getString("da.appDate"));
                    }
                    df.addRow(v2);
                }
            }

            //retrieve the lab test name and test date
            insert = con.prepareStatement("select l.testName,lb.lDate from labtest l , labbook lb where lb.patientId='" + patient + "' AND lb.testId = l.testId");
            ResultSet r5 = insert.executeQuery();
            if (r5.next() == false) {
                labMsg.setText("There are no lab tests");
                DefaultTableModel df2 = (DefaultTableModel) labTests.getModel();
                df2.setRowCount(0);
            } else {
                labMsg.setText("");
                insert = con.prepareStatement("select l.testName,lb.lDate from labtest l , labbook lb where lb.patientId='" + patient + "' AND lb.testId = l.testId");
                ResultSet r6 = insert.executeQuery();
                ResultSetMetaData res1 = r6.getMetaData();
                c = res1.getColumnCount();
                DefaultTableModel df2 = (DefaultTableModel) labTests.getModel();
                df2.setRowCount(0);
                while (r6.next()) {
                    Vector v3 = new Vector();
                    for (int a = 1; a <= c; a++) {
                        v3.add(r6.getString("l.testName"));
                        v3.add(r6.getString("lb.lDate"));
                    }
                    df2.addRow(v3);
                }
            }

            //retrieve the mobile service name and service date
            insert = con.prepareStatement("select s.serviceName,m.serDate from servicepackage s , mobileservice m where m.patientId='" + patient + "' AND m.packageId = s.packageId");
            ResultSet r7 = insert.executeQuery();
            if (r7.next() == false) {
                mobileMsg.setText("There are no mobile services");
                DefaultTableModel df3 = (DefaultTableModel) mobileServices.getModel();
                df3.setRowCount(0);
            } else {
                mobileMsg.setText("");
                insert = con.prepareStatement("select s.serviceName,m.serDate from servicepackage s , mobileservice m where m.patientId='" + patient + "' AND m.packageId = s.packageId");
                ResultSet r8 = insert.executeQuery();
                ResultSetMetaData res2 = r8.getMetaData();
                c = res2.getColumnCount();
                DefaultTableModel df3 = (DefaultTableModel) mobileServices.getModel();
                df3.setRowCount(0);
                while (r8.next()) {
                    Vector v4 = new Vector();
                    for (int a = 1; a <= c; a++) {
                        v4.add(r8.getString("s.serviceName"));
                        v4.add(r8.getString("m.serDate"));
                    }
                    df3.addRow(v4);
                }
            }
            
            //retrieve the medicine details
            insert = con.prepareStatement("select drugName from drug where drugID in(select drugId from billdrug where PharmacyBillID in (select PharmacyBillId from pharmacybill where patientId = '"+patient+"'))");
            ResultSet r9 = insert.executeQuery();
            if (r9.next() == false) {
                medicineMsg.setText("There are no medicines taken");
                DefaultTableModel df4 = (DefaultTableModel) medicine.getModel();
                df4.setRowCount(0);
            } else {
                medicineMsg.setText("");
                insert = con.prepareStatement("select drugName from drug where drugID in(select drugId from billdrug where PharmacyBillID in (select PharmacyBillId from pharmacybill where patientId = '"+patient+"'))");
                ResultSet r10 = insert.executeQuery();
                ResultSetMetaData res3 = r10.getMetaData();
                c = res3.getColumnCount();
                DefaultTableModel df4 = (DefaultTableModel) medicine.getModel();
                df4.setRowCount(0);
                while (r10.next()) {
                    Vector v4 = new Vector();
                    for (int a = 1; a <= c; a++) {
                        v4.add(r10.getString("drugName"));
                    }
                    df4.addRow(v4);
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(patientHistoryNew.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(patientHistoryNew.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchBtnMouseClicked

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        // TODO add your handling code here:
        showDate();
        area.setText(area.getText()+"\t"+"                         "+"UCC PATIENT HISTORY\n");
        area.setText(area.getText()+"\t"+"                                  "+reportDate.getText()+"\n\n");

        area.setText(area.getText()+"---------------------------------------------------Patient Details------------------------------------------------------------\n");
        area.setText(area.getText()+"  Name\t:  "+name.getText()+"\n");
        area.setText(area.getText()+"  Age\t:  "+age.getText()+"\n");
        area.setText(area.getText()+"  Gender\t:  "+gender.getText()+"\n");
        area.setText(area.getText()+"  Contact No\t:  "+patientContact.getText()+"\n\n");
        
        area.setText(area.getText()+"---------------------------------------------Doctor Consultations------------------------------------------------------\n\n");
        if(docConsult.getRowCount()== 0){
            area.setText(area.getText()+"   "+"- There are no doctor consultations\n\n");
        }
        else{
            area.setText(area.getText()+"---------------------------------------------------------------------------------------------------------------------------\n");
            area.setText(area.getText()+"   Doctor Name"+"\t\t\t"+"Consult Date"+"\n");
            area.setText(area.getText()+"----------------------------------------------------------------------------------------------------------------------------------\n\n");

            for (int count = 0; count < docConsult.getRowCount(); count++){
                area.setText(area.getText()+"  - "+docConsult.getValueAt(count, 0).toString()+"\t\t\t");
                area.setText(area.getText()+docConsult.getValueAt(count, 1).toString()+"\n");
            }
        }
 
        area.setText(area.getText()+"\n"+"--------------------------------------------Lab Test Details------------------------------------------------------------\n\n");
        if(labTests.getRowCount()== 0){
            area.setText(area.getText()+"   "+"- There are no lab tests\n\n");
        }
        else{
            area.setText(area.getText()+"-----------------------------------------------------------------------------------------------------------------------------\n");
            area.setText(area.getText()+"   Test Name"+"\t\t\t"+"Test Date"+"\n");
            area.setText(area.getText()+"-----------------------------------------------------------------------------------------------------------------------------\n\n");
            for (int count = 0; count < labTests.getRowCount(); count++){
                area.setText(area.getText()+"  - "+labTests.getValueAt(count, 0).toString()+"\t\t\t");
                area.setText(area.getText()+labTests.getValueAt(count, 1).toString()+"\n");
            }
        }

        area.setText(area.getText()+"\n"+"---------------------------------------Mobile Medical Service Details--------------------------------------------------\n\n");
        
        if(mobileServices.getRowCount()== 0){
            area.setText(area.getText()+"   "+"- There are no mobile medical services\n\n");
        }
        else{
            area.setText(area.getText()+"----------------------------------------------------------------------------------------------------------------------------------\n");
            area.setText(area.getText()+"   Service Name"+"\t\t"+"Service Provided Date"+"\n");
            area.setText(area.getText()+"----------------------------------------------------------------------------------------------------------------------------\n\n");
            for (int count = 0; count < mobileServices.getRowCount(); count++){
                area.setText(area.getText()+"  - "+mobileServices.getValueAt(count, 0).toString()+"\t\t");
                area.setText(area.getText()+mobileServices.getValueAt(count, 1).toString()+"\n");
            }
        }  
        
        area.setText(area.getText()+"\n"+"-------------------------------------------Medicines Taken----------------------------------------------------------------\n\n");
        
        if(medicine.getRowCount()== 0){
            area.setText(area.getText()+"   "+"- There are no medicines taken\n\n");
        }
        else{
//            area.setText(area.getText()+"----------------------------------------------------------------------------------------------------------------\n");
//            area.setText(area.getText()+"  Service Name"+"\t\t"+"Service Provided Date"+"\n");
//            area.setText(area.getText()+"----------------------------------------------------------------------------------------------------------\n\n");
            for (int count = 0; count < medicine.getRowCount(); count++){
                area.setText(area.getText()+"  - "+medicine.getValueAt(count, 0).toString()+"\n");
            }
        }    
    }//GEN-LAST:event_viewBtnActionPerformed

    private void printBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBtnActionPerformed
        // TODO add your handling code here:
        try {
            area.print();
        } catch (Exception e) {

        }
    }//GEN-LAST:event_printBtnActionPerformed

    private void medicineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_medicineMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_medicineMouseClicked

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
         receptionist_patientMain patReg = new receptionist_patientMain();
        patReg.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(patientHistoryNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(patientHistoryNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(patientHistoryNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(patientHistoryNew.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new patientHistoryNew().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField age;
    private javax.swing.JTextArea area;
    private javax.swing.JButton backBtn;
    private javax.swing.JTable docConsult;
    private javax.swing.JLabel docMsg;
    private javax.swing.JTextField gender;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel labMsg;
    private javax.swing.JTable labTests;
    private javax.swing.JTable medicine;
    private javax.swing.JLabel medicineMsg;
    private javax.swing.JLabel mobileMsg;
    private javax.swing.JTable mobileServices;
    private javax.swing.JTextField name;
    private javax.swing.JTextField patientContact;
    private javax.swing.JButton printBtn;
    private javax.swing.JLabel reportDate;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables
}

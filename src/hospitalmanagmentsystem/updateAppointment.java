/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hospitalmanagmentsystem;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.print.PrinterException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ASUS
 */
public class updateAppointment extends javax.swing.JFrame {

    String docid;
    String appointDay;
    String consultant;
    String appointTime;
    String ptoken;
    String fee;
    String patientName;
    int patientChannelingCount;
    String patientCount;
    String doctorId;
    String consultantName;
    String specializationText;
    Connection con1;
    String docname;
    PreparedStatement insert, update, delete;
    PreparedStatement pst = null;
    ResultSet rs = null;
    /**
     * Creates new form updateAppointment
     */
    public updateAppointment() {
        initComponents();
        updateCombo();
//        setimg();
//        jPanel2.setBackground(new Color(255,255,255,120));
    }
    
//    public void setimg(){
//        ImageIcon imageicon = new ImageIcon("C:\\RASHMI\\icon14.png");
//        Image img = imageicon.getImage();
//        Image imgScale = img.getScaledInstance(backg.getWidth(),backg.getHeight(),Image.SCALE_FAST);
//        ImageIcon scaledIcon = new ImageIcon(imgScale);
//        backg.setIcon(scaledIcon);
//        
//    };


    private void updateCombo() {

        try {
            Class.forName("com.mysql.jdbc.Driver");

            con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/channelingcenter", "root", "");

            Speciality1.removeAllItems();

            insert = con1.prepareStatement("select specialization from doctor ");

            ResultSet result = insert.executeQuery();

            while (result.next()) {
                Speciality1.addItem(result.getString("specialization"));

            }
        } catch (SQLException ex) {
            Logger.getLogger(updateAppointment.class.getName()).log(Level.SEVERE, null, ex);

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(updateAppointment.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public updateAppointment(String doc, String doctorid, String appointDay, String appointTime, String token, String fee, String patientName) {
        initComponents();
        consultant = doc;
        docid = doctorid;

        this.docname = consultant;
        cName.setText(consultant);
        this.appointDay = appointDay;
        this.appointTime = appointTime;
        ptoken = token;
        tok.setText(ptoken);
        aTime.setText(appointTime);
        viewDate.setText(appointDay);
        //docAppFee.setEditable(false);
        this.fee = fee;
        docAppFee.setText(fee);
        this.patientName = patientName;
        pname.setText(patientName);
//            cName.setEditable(false);
//            tok.setEditable(false);
//            pname.setEditable(false);
//            viewDate.setEditable(false);
//            aTime.setEditable(false);
        System.out.println(docname);
    }

    public void showDate() {
        java.util.Date d = new java.util.Date();
        SimpleDateFormat sd = new SimpleDateFormat("yyyy-MM-dd");
        viewDate.setText(sd.format(d));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){

                ImageIcon im = new ImageIcon("C:\\Users\\acer\\Documents\\images\\backg1.jpg");
                Image i =im.getImage();

                g.drawImage(i,0,0,this.getSize().width,this.getSize().height,this);

            }
        };
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        pname = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tok = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        updateBtn = new javax.swing.JButton();
        dtime = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        docAppFee = new javax.swing.JTextField();
        aTime = new javax.swing.JTextField();
        viewDate = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Speciality1 = new javax.swing.JComboBox<>();
        chnDay = new javax.swing.JComboBox<>();
        searchBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(214, 234, 245));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Name:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Token:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Consultant Name:");

        cName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cNameActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Time:");

        updateBtn.setBackground(new java.awt.Color(53, 92, 125));
        updateBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        updateBtn.setForeground(new java.awt.Color(255, 255, 255));
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        dtime.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Date:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Doctor Fee");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(dtime, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(87, 87, 87)
                                    .addComponent(jLabel4))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addGap(91, 91, 91)
                                    .addComponent(jLabel3)))
                            .addComponent(jLabel7)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pname, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(tok, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(docAppFee)
                            .addComponent(aTime)
                            .addComponent(viewDate)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel5)
                        .addGap(19, 19, 19)
                        .addComponent(cName, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(51, 51, 51)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(pname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(viewDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(aTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(docAppFee, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dtime)
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doctor Id", "Doctor Name", "Specialization", "No of Patients", "Channeling day", "Channeling Time", "Doctor Fee"
            }
        ));
        jTable1.setRowHeight(25);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Select Doctor Specialization:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Channeling Day");

        Speciality1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Neurologist", "Cardiologist", "Physician", "Psychiatrist" }));
        Speciality1.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                Speciality1PopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        Speciality1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Speciality1ActionPerformed(evt);
            }
        });

        chnDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Weekday", "Weekend" }));
        chnDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chnDayActionPerformed(evt);
            }
        });

        searchBtn.setBackground(new java.awt.Color(53, 92, 125));
        searchBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        searchBtn.setForeground(new java.awt.Color(255, 255, 255));
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        backBtn.setBackground(new java.awt.Color(53, 92, 125));
        backBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        backBtn.setForeground(new java.awt.Color(255, 255, 255));
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(214, 214, 214)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(43, 43, 43)
                                        .addComponent(chnDay, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Speciality1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(53, 53, 53)
                                .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 814, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(56, 56, 56))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(99, 99, 99)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(Speciality1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(145, 145, 145)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(chnDay, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cNameActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        try {

            Class.forName("com.mysql.jdbc.Driver");

            con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/channelingcenter", "root", "");

            String patientName1 = pname.getText();
            String doctorName1 = cName.getText();
            System.out.println(doctorName1);

            String sql1 = "SELECT docId FROM doctor WHERE docName = '" + docname + "'";
            insert = (com.mysql.jdbc.PreparedStatement) con1.prepareStatement(sql1);

            ResultSet r1 = insert.executeQuery(sql1);
            r1.next();
            String appDocId = r1.getString("docId");
            System.out.println("error1");

            String sql2 = "SELECT docId FROM doctor WHERE docName = '" + doctorName1 + "'";
            insert = (com.mysql.jdbc.PreparedStatement) con1.prepareStatement(sql1);

            ResultSet r2 = insert.executeQuery(sql2);
            r2.next();
            String aDocId = r2.getString("docId");
            System.out.println("error1");

            String sql3 = "SELECT patientId FROM patient WHERE fullName = '" + patientName1 + "'";
            insert = (com.mysql.jdbc.PreparedStatement) con1.prepareStatement(sql2);

            ResultSet r3 = insert.executeQuery(sql3);
            r3.next();
            String patient = r3.getString("patientId");
            System.out.println("error2");

            String sql4 = "SELECT da.appoId FROM docappointment da , patient p , doctor d WHERE p.patientId = da.patientId and da.docId = d.docId and da.patientId = '" + patient + "' AND da.docId= '" + appDocId + "'";
            insert = (com.mysql.jdbc.PreparedStatement) con1.prepareStatement(sql4);
            ResultSet r4 = insert.executeQuery();
            r4.next();
            String appointmentId = r4.getString("da.appoId");

//            insert=con1.prepareStatement("select * from docAppointment da , patient p , doctor d where p.patientId = da.patientId and da.docId = d.docId and d.specialization = ?");
//         
//            
//            ResultSet r2 = insert.executeQuery();
//            r2.next();
//            String doctorId2 = r2.getString("d.docId");
//             
//            ResultSet r3 = insert.executeQuery();
//            r3.next();
//            String app = r3.getString("da.appoId");
//            
//            ResultSet r4 = insert.executeQuery();
//            r4.next();
//            String patient = r4.getString("p.patientId");
            String token = tok.getText();
            String viewdate = viewDate.getText();
            String aTime1 = aTime.getText();

            //String str2 = Integer.toString(token);
            String sql5 = "UPDATE docappointment SET appDate = '" + viewdate + "',appTime = '" + aTime1 + "' ,tokenNo = '" + token + "' ,docId = '" + aDocId + "' WHERE appoId='" + appointmentId + "' AND patientId='" + patient + "'";
            update = (com.mysql.jdbc.PreparedStatement) con1.prepareStatement(sql5);
            update.executeUpdate();

            JOptionPane.showMessageDialog(this, "Appointment Updated");

        } catch (SQLException ex) {

            System.out.println(ex);
            Logger.getLogger(updateAppointment.class.getName()).log(Level.SEVERE, null, ex);

        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
            Logger.getLogger(updateAppointment.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_updateBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        viewAppointment v1 = new viewAppointment();
        v1.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_backBtnActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        DefaultTableModel df = (DefaultTableModel) jTable1.getModel();
        int selectedIndex = jTable1.getSelectedRow();
        System.out.println("its empty");
        doctorId = df.getValueAt(selectedIndex, 0).toString();
        cName.setText(df.getValueAt(selectedIndex, 1).toString());
        consultantName = df.getValueAt(selectedIndex, 1).toString();
        specializationText = df.getValueAt(selectedIndex, 2).toString();
        patientCount = df.getValueAt(selectedIndex, 3).toString();
        // viewDate.setText(df.getValueAt(selectedIndex, 4).toString());
        aTime.setText(df.getValueAt(selectedIndex, 5).toString());
        docAppFee.setText(df.getValueAt(selectedIndex, 6).toString());
        showDate();

        //check token number count limit
        if (consultantName.equals("") && specializationText.equals("")) {
            JOptionPane.showMessageDialog(this, "Please select a consultant");
        } else {
            try {
                Class.forName("com.mysql.jdbc.Driver");

                con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/channelingcenter", "root", "");

                insert = con1.prepareStatement("select count(patientId) as count\n"
                        + "from docappointment,doctor\n" + "where docappointment.docId = doctor.docId "
                        + "and doctor.docId = ?");

                insert.setString(1, doctorId);

                ResultSet rs = insert.executeQuery();

                while (rs.next()) {

                    patientChannelingCount = (rs.getInt("count"));
                }

                if (Integer.parseInt(patientCount) == patientChannelingCount) {
                    JOptionPane.showMessageDialog(this, "No more appointments available. Channneling is full");
                } else {
                    insert = con1.prepareStatement("select docappointment.appStatus\n"
                            + "from docappointment,doctor\n" + "where docappointment.docId = doctor.docId "
                            + "and doctor.docId = ?");
                    insert.setString(1, doctorId);
                    String status = "Active";

                    ResultSet rs2 = insert.executeQuery();

                    while (rs2.next()) {
                        status = (rs2.getString("docappointment.appStatus"));
                    }

                    if (status.equals("Cancelled")) {
                        JOptionPane.showMessageDialog(this, "Cannot add appointment. This channeling is cancelled");
                    } else {
                        patientChannelingCount += 1;
                        String patientChannelingCounts = "";
                        patientChannelingCounts += patientChannelingCount;
                        System.out.println(patientChannelingCounts);

                    }

                }

            } catch (SQLException ex) {
                // Logger.getLogger(HIpd.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                //Logger.getLogger(HIpd.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void Speciality1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Speciality1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Speciality1ActionPerformed

    private void chnDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chnDayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chnDayActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:

        if (chnDay.getSelectedItem().equals("Weekday")) {

            int c;
            try {

                Class.forName("com.mysql.jdbc.Driver");
                con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/channelingcenter", "root", "");
                insert = con1.prepareStatement("select docID , docName , specialization , docCount , weekday , weekdayTime , docFee from doctor where specialization = ? AND docAvailability = 'Yes'");
                insert.setString(1, Speciality1.getSelectedItem().toString());

                //selectAddresult.setString(1, Specialty.getSelectedItem().toString());
                ResultSet rs = insert.executeQuery();

                ResultSetMetaData res = rs.getMetaData();

                c = res.getColumnCount();

                DefaultTableModel df = (DefaultTableModel) jTable1.getModel();
                df.setRowCount(0);

                while (rs.next()) {
                    Vector v2 = new Vector();
                    for (int a = 1; a <= c; a++) {
                        v2.add(rs.getString("docId"));
                        v2.add(rs.getString("docName"));
                        v2.add(rs.getString("specialization"));
                        v2.add(rs.getString("docCount"));
                        v2.add(rs.getString("weekday"));
                        v2.add(rs.getString("weekdayTime"));
                        v2.add(rs.getString("docFee"));

                    }
                    df.addRow(v2);
                }

            } catch (SQLException ex) {
                //Logger.getLogger(ShReports.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                //Logger.getLogger(ShReports.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (chnDay.getSelectedItem().equals("Weekend")) {

            int c;
            try {

                Class.forName("com.mysql.jdbc.Driver");
                con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/channelingcenter", "root", "");
                insert = con1.prepareStatement("select docID , docName , specialization , docCount , weekend , weekendTime , docFee from doctor where specialization = ? AND docAvailability = 'Yes'");
                insert.setString(1, Speciality1.getSelectedItem().toString());

                //selectAddresult.setString(1, Specialty.getSelectedItem().toString());
                ResultSet rs = insert.executeQuery();

                ResultSetMetaData res = rs.getMetaData();

                c = res.getColumnCount();

                DefaultTableModel df = (DefaultTableModel) jTable1.getModel();
                df.setRowCount(0);

                while (rs.next()) {
                    Vector v2 = new Vector();
                    for (int a = 1; a <= c; a++) {
                        v2.add(rs.getString("docId"));
                        v2.add(rs.getString("docName"));
                        v2.add(rs.getString("specialization"));
                        v2.add(rs.getString("docCount"));
                        v2.add(rs.getString("weekend"));
                        v2.add(rs.getString("weekendTime"));
                        v2.add(rs.getString("docFee"));

                    }
                    df.addRow(v2);
                }

            } catch (SQLException ex) {
                //Logger.getLogger(ShReports.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                //Logger.getLogger(ShReports.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error Message");
        }

    }//GEN-LAST:event_searchBtnActionPerformed

    private void Speciality1PopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_Speciality1PopupMenuWillBecomeInvisible
        // TODO add your handling code here:
//        try {
//            Class.forName("com.mysql.jdbc.Driver");
//            con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/channelingcenter", "root", "");
//
//            String item = (String) serName.getSelectedItem();
//            String sql = "select PackageFee from servicepackage where serviceName=?";
//
//            pst = con1.prepareStatement(sql);
//            pst.setString(1, item);
//            rs = pst.executeQuery();
//
//            if (rs.next()) {
//                testChargeTxtField.setText(rs.getString("PackageFee"));
//            }
//        } catch (Exception e) {
//
//        }
    }//GEN-LAST:event_Speciality1PopupMenuWillBecomeInvisible

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(updateAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(updateAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(updateAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(updateAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new updateAppointment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Speciality1;
    private javax.swing.JTextField aTime;
    private javax.swing.JButton backBtn;
    private javax.swing.JTextField cName;
    private javax.swing.JComboBox<String> chnDay;
    private javax.swing.JTextField docAppFee;
    private javax.swing.JLabel dtime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField pname;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField tok;
    private javax.swing.JButton updateBtn;
    private javax.swing.JTextField viewDate;
    // End of variables declaration//GEN-END:variables
}

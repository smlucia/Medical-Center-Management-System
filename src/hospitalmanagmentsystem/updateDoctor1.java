/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hospitalmanagmentsystem;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hp
 */
public class updateDoctor1 extends javax.swing.JFrame {
    
    //String doctorAvailability;
  
    Connection con1;
    PreparedStatement insert,update,delete;
    final String password ="";
    final String userName = "root";
    final String URL = "jdbc:mysql://localhost:3308/channelingcenter";
    private String davailbility;
   
    
    /**
     * Creates new form updateDoctor
     */
    public updateDoctor1() {
        initComponents();
//        setimg();
//        jPanel1.setBackground(new Color(255,255,255,120));
        doctorId.setEditable(false);
        try {
               //set connection
               Class.forName("com.mysql.jdbc.Driver");
               con1 = (Connection) DriverManager.getConnection(URL, userName, password);
          
        } catch (HeadlessException | ClassNotFoundException | SQLException ex) {
            
           
        }
    }
    
//    public void setimg(){
//        ImageIcon imageicon = new ImageIcon("C:\\Users\\singer\\Downloads\\user_roles\\user_roles\\icon14.png");
//        Image img = imageicon.getImage();
//        Image imgScale = img.getScaledInstance(backg.getWidth(),backg.getHeight(),Image.SCALE_FAST);
//        ImageIcon scaledIcon = new ImageIcon(imgScale);
//        backg.setIcon(scaledIcon);
//        
//    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
     
    public void table_update(){
    
        try {
              
               
                insert = con1.prepareStatement("SELECT * FROM doctor");
                
                ResultSet rs = insert.executeQuery();
             
               
                ResultSetMetaData res = rs.getMetaData();
                int c= res.getColumnCount();

                DefaultTableModel df = (DefaultTableModel) doctorAddTable.getModel();
                df.setRowCount(0);

                while(rs.next()){

                    Vector v2 = new Vector ();
                    for (int a=1;a<=c;a++){

                       v2.add(rs.getString("docId"));
                       v2.add(rs.getString("docName"));
                       v2.add(rs.getString("specialization"));
                       v2.add(rs.getString("docFee"));
                       v2.add(rs.getString("email"));
                       v2.add(rs.getString("phonNo"));
                       v2.add(rs.getString("docAvailability"));
                       v2.add(rs.getString("docCount"));
                       v2.add(rs.getString("weekdayTime"));
                       v2.add(rs.getString("weekendTime"));
                       v2.add(rs.getString("weekday"));
                       v2.add(rs.getString("weekend"));        
                    }
                 df.addRow(v2);
                }
              
           } catch (SQLException ex) {
               Logger.getLogger(docReport.class.getName()).log(Level.SEVERE, null, ex);
           }
    }
    
    
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        docDetailsLable = new javax.swing.JLabel();
        docNameLable2 = new javax.swing.JLabel();
        txtDoctorName2 = new javax.swing.JTextField();
        docSpecLable2 = new javax.swing.JLabel();
        docFeeLable2 = new javax.swing.JLabel();
        docFeeFeild2 = new javax.swing.JTextField();
        docEmailLable2 = new javax.swing.JLabel();
        txtEmail2 = new javax.swing.JTextField();
        docPhnLable2 = new javax.swing.JLabel();
        docPhnTextField2 = new javax.swing.JTextField();
        docAvailabiltyLable = new javax.swing.JLabel();
        docAvailibilityYes = new javax.swing.JRadioButton();
        docAvailibilityNo = new javax.swing.JRadioButton();
        docChaDayLable2 = new javax.swing.JLabel();
        docChnlTimeLable2 = new javax.swing.JLabel();
        docWeekdayLable2 = new javax.swing.JLabel();
        WeekdayTimeDropDown2 = new javax.swing.JComboBox<>();
        weekEndLable2 = new javax.swing.JLabel();
        weekendTimeDropdown2 = new javax.swing.JComboBox<>();
        docUpdateBtn = new javax.swing.JButton();
        docDeleteBtn = new javax.swing.JButton();
        backBtn2 = new javax.swing.JButton();
        searchSpecLable = new javax.swing.JLabel();
        searchDropdown = new javax.swing.JComboBox<>();
        searchBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        doctorAddTable = new javax.swing.JTable();
        weekdayChannel = new javax.swing.JLabel();
        weekdayChannelDropDown = new javax.swing.JComboBox<>();
        weekendChannel = new javax.swing.JLabel();
        weekendChannelDropDown = new javax.swing.JComboBox<>();
        docIdLable = new javax.swing.JLabel();
        doctorId = new javax.swing.JTextField();
        doctorCountLable = new javax.swing.JLabel();
        doctorCount = new javax.swing.JTextField();
        txtDoctorSpecility = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        docDetailsLable.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        docDetailsLable.setText("Doctor Details");

        docNameLable2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        docNameLable2.setText("Doctor Name:");

        txtDoctorName2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        txtDoctorName2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorName2ActionPerformed(evt);
            }
        });

        docSpecLable2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        docSpecLable2.setText("Doctor Specility:");

        docFeeLable2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        docFeeLable2.setText("Doctor fee:");

        docFeeFeild2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        docFeeFeild2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                docFeeFeild2ActionPerformed(evt);
            }
        });

        docEmailLable2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        docEmailLable2.setText("Email:");

        txtEmail2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        docPhnLable2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        docPhnLable2.setText("Phone No:");

        docPhnTextField2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        docPhnTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                docPhnTextField2ActionPerformed(evt);
            }
        });

        docAvailabiltyLable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        docAvailabiltyLable.setText("Doctor Availibility:");

        buttonGroup1.add(docAvailibilityYes);
        docAvailibilityYes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        docAvailibilityYes.setText("Yes");
        docAvailibilityYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                docAvailibilityYesActionPerformed(evt);
            }
        });

        buttonGroup1.add(docAvailibilityNo);
        docAvailibilityNo.setText("No");
        docAvailibilityNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                docAvailibilityNoActionPerformed(evt);
            }
        });

        docChaDayLable2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        docChaDayLable2.setText("Channelling Day: ");

        docChnlTimeLable2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        docChnlTimeLable2.setText("Chanelling Time:");

        docWeekdayLable2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        docWeekdayLable2.setText("Weekday");

        WeekdayTimeDropDown2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "8.00-10.00 a.m", "1.00-3.00 p.m", "4.00-6.00 p.m", "6.00-8.00 p.m" }));
        WeekdayTimeDropDown2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeekdayTimeDropDown2ActionPerformed(evt);
            }
        });

        weekEndLable2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        weekEndLable2.setText("Weekend");

        weekendTimeDropdown2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "6.00-8.00 a.m", "10.00-12.00 a.m", "2.00-4.00 p.m", "8.00-10.00 p.m" }));
        weekendTimeDropdown2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weekendTimeDropdown2ActionPerformed(evt);
            }
        });

        docUpdateBtn.setBackground(new java.awt.Color(53, 92, 125));
        docUpdateBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        docUpdateBtn.setForeground(new java.awt.Color(255, 255, 255));
        docUpdateBtn.setText("Update");
        docUpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                docUpdateBtnActionPerformed(evt);
            }
        });

        docDeleteBtn.setBackground(new java.awt.Color(53, 92, 125));
        docDeleteBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        docDeleteBtn.setForeground(new java.awt.Color(255, 255, 255));
        docDeleteBtn.setText("Delete");
        docDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                docDeleteBtnActionPerformed(evt);
            }
        });

        backBtn2.setBackground(new java.awt.Color(53, 92, 125));
        backBtn2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        backBtn2.setForeground(new java.awt.Color(255, 255, 255));
        backBtn2.setText("Back");
        backBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtn2ActionPerformed(evt);
            }
        });

        searchSpecLable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        searchSpecLable.setText("specialty:");

        searchDropdown.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "neurologist", "cardiologist", "physician", "psychiatrist", "Radiology", "Urology", "Dermatology", " " }));
        searchDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDropdownActionPerformed(evt);
            }
        });

        searchBtn.setBackground(new java.awt.Color(53, 92, 125));
        searchBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        searchBtn.setForeground(new java.awt.Color(255, 255, 255));
        searchBtn.setText("search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        doctorAddTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        doctorAddTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DocId", "Dr.name", "Speciality", "Doc Fee", "Email", "Phone no", "Availability", "No of patients", "WeekdTime", "WeekendTime", "Weekday", "Weekend"
            }
        ));
        doctorAddTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctorAddTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(doctorAddTable);

        weekdayChannel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        weekdayChannel.setText("Weekday");

        weekdayChannelDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" }));

        weekendChannel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        weekendChannel.setText("Weekend");

        weekendChannelDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Saturday", "Sunday" }));

        docIdLable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        docIdLable.setText("Doctor Id:");

        doctorId.setBorder(null);
        doctorId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorIdActionPerformed(evt);
            }
        });

        doctorCountLable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        doctorCountLable.setText("No of patients");

        doctorCount.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        doctorCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorCountActionPerformed(evt);
            }
        });

        txtDoctorSpecility.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Neurologist", "Cardiologist", "Physician", "Psychiatrist", "Radiology", "Urology", "Dermatology" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(356, 356, 356)
                .addComponent(docDetailsLable, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchSpecLable)
                .addGap(29, 29, 29)
                .addComponent(searchDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(backBtn2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(docChaDayLable2)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(weekendChannel)
                                        .addGap(18, 18, 18)
                                        .addComponent(weekendChannelDropDown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(weekdayChannel)
                                        .addGap(18, 18, 18)
                                        .addComponent(weekdayChannelDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(docChnlTimeLable2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(weekEndLable2)
                                    .addComponent(docWeekdayLable2))
                                .addGap(24, 24, 24)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(weekendTimeDropdown2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(WeekdayTimeDropDown2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(docAvailabiltyLable)
                                        .addGap(18, 18, 18)
                                        .addComponent(docAvailibilityYes)
                                        .addGap(30, 30, 30)
                                        .addComponent(docAvailibilityNo))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(docNameLable2)
                                            .addComponent(docIdLable))
                                        .addGap(28, 28, 28)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(doctorId, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtDoctorName2, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(doctorCountLable)
                                        .addGap(18, 18, 18)
                                        .addComponent(doctorCount))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(docFeeLable2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(34, 34, 34))
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                    .addComponent(docEmailLable2)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(txtEmail2)
                                                .addComponent(docFeeFeild2, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(docPhnLable2)
                                            .addGap(46, 46, 46)
                                            .addComponent(docPhnTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(docSpecLable2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtDoctorSpecility, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 799, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(docUpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62)
                                .addComponent(docDeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(104, 104, 104))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(docDetailsLable, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchSpecLable)
                            .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(docIdLable)
                            .addComponent(doctorId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDoctorName2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(docNameLable2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(docSpecLable2)
                            .addComponent(txtDoctorSpecility, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 21, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(docFeeLable2)
                            .addComponent(docFeeFeild2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEmail2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(docEmailLable2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(docPhnLable2)
                            .addComponent(docPhnTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(doctorCount, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(doctorCountLable))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(docAvailabiltyLable, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(docAvailibilityYes)
                            .addComponent(docAvailibilityNo))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(docChaDayLable2)
                            .addComponent(weekdayChannel)
                            .addComponent(weekdayChannelDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weekendChannel)
                    .addComponent(weekendChannelDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(docDeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(docUpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(docChnlTimeLable2)
                            .addComponent(docWeekdayLable2)
                            .addComponent(WeekdayTimeDropDown2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(weekendTimeDropdown2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weekEndLable2))))
                .addGap(8, 8, 8)
                .addComponent(backBtn2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void doctorAddTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorAddTableMouseClicked

        DefaultTableModel df = (DefaultTableModel) doctorAddTable.getModel();
        int selectedIndex = doctorAddTable.getSelectedRow();
        
        doctorId.setText(df.getValueAt(selectedIndex, 0).toString());
        txtDoctorName2.setText(df.getValueAt(selectedIndex, 1).toString());
        txtDoctorSpecility.setSelectedItem(df.getValueAt(selectedIndex, 2).toString());
        docFeeFeild2.setText(df.getValueAt(selectedIndex,3).toString());
        txtEmail2.setText(df.getValueAt(selectedIndex, 4).toString());
        docPhnTextField2.setText(df.getValueAt(selectedIndex, 5).toString());
        
        String val=   df.getValueAt(selectedIndex, 6).toString();
        String davailbility = df.getValueAt(selectedIndex,6).toString();
            if(davailbility.equals("Yes")) {
                docAvailibilityYes.setSelected(true);
            }
            else {
                docAvailibilityNo.setSelected(true);
            }
        doctorCount.setText(df.getValueAt(selectedIndex, 7).toString());
        
        WeekdayTimeDropDown2.setSelectedItem(df.getValueAt(selectedIndex, 8).toString());
        weekendTimeDropdown2.setSelectedItem(df.getValueAt(selectedIndex, 9).toString());
        
        weekdayChannelDropDown.setSelectedItem(df.getValueAt(selectedIndex, 10).toString());
        weekendChannelDropDown.setSelectedItem(df.getValueAt(selectedIndex, 11).toString());
    
       
        
        
    }//GEN-LAST:event_doctorAddTableMouseClicked

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed

            // TODO add your handling code here:
 
        int c;
        try{

           
            insert=con1.prepareStatement("select * from doctor where specialization= ?");
            insert.setString(1,searchDropdown.getSelectedItem().toString());

            //selectAddresult.setString(1, Specialty.getSelectedItem().toString());
            ResultSet rs=insert.executeQuery();

            ResultSetMetaData res =rs.getMetaData();

            c = res.getColumnCount();

            DefaultTableModel df = (DefaultTableModel) doctorAddTable.getModel();
            df.setRowCount(0);

            while(rs.next()){
                Vector v2 = new Vector ();
                for (int a=1;a<=c;a++){
                    v2.add(rs.getString("docId"));
                    v2.add(rs.getString("docName"));
                    v2.add(rs.getString("specialization"));
                    v2.add(rs.getString("docFee"));
                    v2.add(rs.getString("email"));
                    v2.add(rs.getString("phonNo"));
                    v2.add(rs.getString("docAvailability"));
                    v2.add(rs.getString("docCount"));
                    v2.add(rs.getString("weekdayTime"));
                    v2.add(rs.getString("weekendTime"));
                    v2.add(rs.getString("weekday"));
                    v2.add(rs.getString("weekend"));
                    
                   
                    
                }
                df.addRow(v2);
            }

        } catch (SQLException ex) {
            Logger.getLogger(docReport.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void searchDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDropdownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchDropdownActionPerformed

    private void backBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtn2ActionPerformed
        adminDoctorMain back2 = new adminDoctorMain();
        back2.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backBtn2ActionPerformed

    private void docUpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_docUpdateBtnActionPerformed

              // TODO add your handling code here:
            String availabilityStatus = "";
            String davailbility = availabilityStatus;
            
            String docID=doctorId.getText(); 
            String dname=txtDoctorName2.getText();
            String demail =txtEmail2.getText();
            String docFee1 = docFeeFeild2.getText();
            String dspecialty =txtDoctorSpecility.getSelectedItem().toString();
            String phnNo =docPhnTextField2.getText();
            String weekdayTime= WeekdayTimeDropDown2.getSelectedItem().toString();
            String weekendTime= weekendTimeDropdown2.getSelectedItem().toString();
            String doctorCount1= doctorCount.getText();
            String weekdayChannel1= weekdayChannelDropDown.getSelectedItem().toString();
            String weekendChannel1= weekendChannelDropDown.getSelectedItem().toString();
             
            try {
                  if(!doctorId.getText().isEmpty()){
        
            if(docAvailibilityNo.isSelected()){
            
                availabilityStatus="No";
            }
             if(docAvailibilityYes.isSelected()){
            
                availabilityStatus="Yes";
            }
                  
             
            if(availabilityStatus !=""){
                   
                 
                   
                    insert = con1.prepareStatement("update doctor set docName=?,specialization=?,docFee=?,email=?,phonNo=?,docAvailability=?,docCount=?,weekdayTime=?,weekendTime=?,weekday=?,weekend=? where docId=?");
				
                    insert.setString(1, dname);
                    insert.setString(2, dspecialty);
                     insert.setString(3, docFee1 );
                    insert.setString(4, demail);
                    insert.setString(5, phnNo);
                     if(docAvailibilityYes.isSelected())
                    {
                       davailbility = docAvailibilityYes.getText(); //if Availability = Yes
                    }
                    if(docAvailibilityNo.isSelected())
                    {
                       davailbility = docAvailibilityNo.getText(); //if Availability = No
                    }
                    insert.setString(6, davailbility);
                    insert.setString(7, doctorCount1 );
                    
                    insert.setString(8,weekdayTime);
                    insert.setString(9,weekendTime);
                    insert.setString(10,weekdayChannel1);
                    insert.setString(11,weekendChannel1);
                   
                   
                    insert.setString(12,docID);
                    insert.executeUpdate();
                     //excute query statement
                    
                    JOptionPane.showMessageDialog(null, "Sucessfully updated");
                    
                    /* doctorId.setText("");
                     txtDoctorName2.setText("");
                     txtDoctorSpecility.getEditor().setItem("");
                     docFeeFeild2.setText("");
                     txtEmail2.setText("");
                     docPhnTextField2.setText("");
                     
                     
                     docPhnTextField2.setText("");
                     WeekdayTimeDropDown2.getEditor().setItem("");
                     weekendTimeDropdown2.getEditor().setItem("");
                     doctorCount.setText("");
                     weekdayChannelDropDown.getEditor().setItem("");
                     weekendChannelDropDown.getEditor().setItem("");*/
                    
                     }else{
                
                 JOptionPane.showMessageDialog(null, "Please enter doctor availibility ","select doctor availibility", JOptionPane.ERROR_MESSAGE);
                
            }
        
         }else{
        
            JOptionPane.showMessageDialog(null, "Please select doctor id from table ","select doctor id", JOptionPane.ERROR_MESSAGE);
        
        }
                } 
                catch (SQLException ex) {
                      JOptionPane.showMessageDialog(null, "Database connection error ","Database connection error", JOptionPane.ERROR_MESSAGE);
                } 
                
               table_update();                            
    }//GEN-LAST:event_docUpdateBtnActionPerformed

    private void weekendTimeDropdown2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weekendTimeDropdown2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_weekendTimeDropdown2ActionPerformed

    private void WeekdayTimeDropDown2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeekdayTimeDropDown2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WeekdayTimeDropDown2ActionPerformed

    private void docPhnTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_docPhnTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_docPhnTextField2ActionPerformed

    private void docFeeFeild2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_docFeeFeild2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_docFeeFeild2ActionPerformed

    private void doctorIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doctorIdActionPerformed

    private void doctorCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorCountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doctorCountActionPerformed

    private void docAvailibilityYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_docAvailibilityYesActionPerformed
        // TODO add your handling code here:
       davailbility = "Yes";
       if(docAvailibilityYes.isSelected()){
            docAvailibilityNo.setSelected(false);

     }
    }//GEN-LAST:event_docAvailibilityYesActionPerformed

    private void docAvailibilityNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_docAvailibilityNoActionPerformed
        // TODO add your handling code here:
        davailbility = "No";
      if(docAvailibilityNo.isSelected()){
          docAvailibilityYes.setSelected(false);

       }
    }//GEN-LAST:event_docAvailibilityNoActionPerformed

    private void txtDoctorName2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorName2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorName2ActionPerformed

    private void docDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_docDeleteBtnActionPerformed
        // TODO add your handling code here:
        
        try {
            // TODO add your handling code here:
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            
        }

        try {
            con1 = (com.mysql.jdbc.Connection) DriverManager.getConnection("jdbc:mysql://localhost:3308/channelingcenter","root", "");
            int row = doctorAddTable.getSelectedRow();

            String cell = doctorAddTable.getModel().getValueAt(row, 0).toString();

            String sql = "DELETE FROM doctor where docId = "+cell;

            update=(com.mysql.jdbc.PreparedStatement) con1.prepareStatement(sql);

            update.executeUpdate(sql);

            DefaultTableModel tblModel = (DefaultTableModel) doctorAddTable.getModel();

            //delete row
            if(doctorAddTable.getSelectedRowCount()==1 ){
                //if single row is selected thatn delete
                tblModel.removeRow(doctorAddTable.getSelectedRow());

                JOptionPane.showMessageDialog(null,"Deleted successfully");

            }
            else{
                if(doctorAddTable.getRowCount() == 0){
                    //if table is empty
                    JOptionPane.showMessageDialog(this,"Table is Empty");
                }
    }//GEN-LAST:event_docDeleteBtnActionPerformed
        }   
            catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,"Can not delete");
        }
        
        doctorId.setText("");
        txtDoctorName2.setText("");
        txtEmail2.setText("");
        docFeeFeild2.setText("");
        txtDoctorSpecility.setSelectedItem("None");
        docPhnTextField2.setText("");
        WeekdayTimeDropDown2.setSelectedItem("None");
        weekendTimeDropdown2.setSelectedItem("None");
        doctorCount.setText("");
        weekdayChannelDropDown.setSelectedItem("None");
        weekendChannelDropDown.setSelectedItem("None");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(updateDoctor1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(updateDoctor1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(updateDoctor1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(updateDoctor1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new updateDoctor1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> WeekdayTimeDropDown2;
    private javax.swing.JButton backBtn2;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel docAvailabiltyLable;
    private javax.swing.JRadioButton docAvailibilityNo;
    private javax.swing.JRadioButton docAvailibilityYes;
    private javax.swing.JLabel docChaDayLable2;
    private javax.swing.JLabel docChnlTimeLable2;
    private javax.swing.JButton docDeleteBtn;
    private javax.swing.JLabel docDetailsLable;
    private javax.swing.JLabel docEmailLable2;
    private javax.swing.JTextField docFeeFeild2;
    private javax.swing.JLabel docFeeLable2;
    private javax.swing.JLabel docIdLable;
    private javax.swing.JLabel docNameLable2;
    private javax.swing.JLabel docPhnLable2;
    private javax.swing.JTextField docPhnTextField2;
    private javax.swing.JLabel docSpecLable2;
    private javax.swing.JButton docUpdateBtn;
    private javax.swing.JLabel docWeekdayLable2;
    private javax.swing.JTable doctorAddTable;
    private javax.swing.JTextField doctorCount;
    private javax.swing.JLabel doctorCountLable;
    private javax.swing.JTextField doctorId;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton searchBtn;
    private javax.swing.JComboBox<String> searchDropdown;
    private javax.swing.JLabel searchSpecLable;
    private javax.swing.JTextField txtDoctorName2;
    private javax.swing.JComboBox<String> txtDoctorSpecility;
    private javax.swing.JTextField txtEmail2;
    private javax.swing.JLabel weekEndLable2;
    private javax.swing.JLabel weekdayChannel;
    private javax.swing.JComboBox<String> weekdayChannelDropDown;
    private javax.swing.JLabel weekendChannel;
    private javax.swing.JComboBox<String> weekendChannelDropDown;
    private javax.swing.JComboBox<String> weekendTimeDropdown2;
    // End of variables declaration//GEN-END:variables
}

